name: Docker Build and Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile'
      - 'frontend/Dockerfile'
      - 'docker-compose*.yml'
      - 'app/**'
      - 'frontend/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile'
      - 'frontend/Dockerfile'
      - 'docker-compose*.yml'
      - 'app/**'
      - 'frontend/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test backend container
  test-backend-container:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: webshop-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test backend container
      run: |
        # Start the container
        docker run -d --name test-backend -p 8000:8000 webshop-backend:test
        
        # Wait for container to be ready
        sleep 30
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Test root endpoint
        curl -f http://localhost:8000/ || exit 1
        
        # Cleanup
        docker stop test-backend
        docker rm test-backend

  # Build and test frontend container
  test-frontend-container:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: webshop-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test frontend container
      run: |
        # Start the container
        docker run -d --name test-frontend -p 80:80 webshop-frontend:test
        
        # Wait for container to be ready
        sleep 30
        
        # Test health endpoint
        curl -f http://localhost:80/health || exit 1
        
        # Test root endpoint
        curl -f http://localhost:80/ || exit 1
        
        # Cleanup
        docker stop test-frontend
        docker rm test-frontend

  # Test Docker Compose
  test-docker-compose:
    runs-on: ubuntu-latest
    needs: [test-backend-container, test-frontend-container]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build and test with Docker Compose
      run: |
        # Build images
        docker-compose build
        
        # Start services
        docker-compose up -d
        
        # Wait for services to be ready
        sleep 60
        
        # Test backend
        curl -f http://localhost:8000/health || exit 1
        
        # Test frontend
        curl -f http://localhost:80/health || exit 1
        
        # Stop services
        docker-compose down

  # Security scan containers
  container-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build images for security scan
      run: |
        docker build -t webshop-backend:scan .
        docker build -t webshop-frontend:scan ./frontend

    - name: Run Trivy vulnerability scanner on backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'webshop-backend:scan'
        format: 'sarif'
        output: 'trivy-backend-results.sarif'

    - name: Run Trivy vulnerability scanner on frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'webshop-frontend:scan'
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: |
          trivy-backend-results.sarif
          trivy-frontend-results.sarif

  # Push images on main branch
  push-images:
    needs: [test-backend-container, test-frontend-container, test-docker-compose, container-security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
